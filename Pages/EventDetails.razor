@using EventRegistrationApp.Data
@using EventRegistrationApp.Services

 
<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Event Details</h4>
        </div>
        
 <div class="card-body">
    <strong>Name:</strong> @EventModel.Name
    <strong>Date:</strong> @EventModel.Date.ToShortDateString()
    <strong>Location:</strong> @EventModel.Location
    <strong>Description:</strong> @EventModel.Description
   <strong>Total Registrations:</strong> @EventModel.TotalRegistration
   <strong>Attended:</strong> @EventModel.Registrations.Count(r => r.IsAttended)
   
             @if (EventModel.Registrations.Any())
{
    <h5 class="mb-3">Registrants</h5>
    <table class="table table-striped table-hover">
        <thead class="table-light">
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Attended</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reg in EventModel.Registrations)
            {
                <tr>
                    <td>@reg.Name</td>
                    <td>@reg.Email</td>
                    <td>
                        @* <input type="checkbox" @bind="reg.IsAttended" @onchange="() => OnAttendanceToggled(reg)" /> *@
                        <input type="checkbox" @bind="reg.IsAttended" @bind:after="() => OnAttendanceToggled(reg)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="text-muted fst-italic">No registrations yet.</p>
}

        </div>
    </div>
</div>
@code {
    [Parameter]
    public Event EventModel { get; set; } = new();

 

    [Inject]
 
    public EventService EventService { get; set; } = null!;

    private async Task OnAttendanceToggled(Registration reg)
    {
        // Just save the event model to persist changes
        await EventService.SaveEventAsync(EventModel);
    }
}
 

