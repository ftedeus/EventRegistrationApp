@using EventRegistrationApp.Data
<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-secondary text-white">
            <h5 class="mb-0">Event Registration</h5>
        </div>
        <div class="card-body">
            <EditForm Model="NewRegistration" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row mb-3">
                    <label class="col-sm-2 col-form-label">Name</label>
                    <div class="col-sm-10">
                        <InputText class="form-control" @bind-Value="NewRegistration.Name" />
                    </div>
                </div>

                <div class="row mb-3">
                    <label class="col-sm-2 col-form-label">Email</label>
                    <div class="col-sm-10">
                        <InputText class="form-control" @bind-Value="NewRegistration.Email" />
                    </div>
                </div>

                <div class="text-end">
                    <button type="submit" class="btn btn-primary">Register</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
 

@code {
    [Parameter]
    public Event EventModel { get; set; } = new();

    [Parameter]
    public EventCallback<Event> EventChanged { get; set; }

    private Registration NewRegistration { get; set; } = new();

    private async Task HandleValidSubmit()
    {
        EventModel.Registrations.Add(NewRegistration);
        EventModel.TotalRegistration = EventModel.Registrations.Count;
        await EventChanged.InvokeAsync(EventModel);
        NewRegistration = new(); // reset form
    }
}
